{"ast":null,"code":"import _slicedToArray from\"/Users/iuliia/Desktop/React_projects/weather_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import Conditions from'../Conditions/Conditions';import classes from'./Forecast.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Forecast=function Forecast(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),city=_useState2[0],setCity=_useState2[1];var _useState3=useState('imperial'),_useState4=_slicedToArray(_useState3,2),unit=_useState4[0],setUnit=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),loading=_useState8[0],setLoading=_useState8[1];//const uriEncodedCity = encodeURIComponent(city);\nvar _useState9=useState({}),_useState10=_slicedToArray(_useState9,2),responseObj=_useState10[0],setResponseObj=_useState10[1];function getForecast(e){e.preventDefault();if(city.length===0){return setError(true);}// Clear state in preparation for new data\nsetError(false);setResponseObj({});setLoading(true);var uriEncodedCity=encodeURIComponent(city);fetch(\"https://community-open-weather-map.p.rapidapi.com/weather?units=\".concat(unit,\"&q=\").concat(uriEncodedCity),{\"method\":\"GET\",\"headers\":{\"x-rapidapi-host\":\"community-open-weather-map.p.rapidapi.com\",\"x-rapidapi-key\":\"apikey\"}}).then(function(response){return response.json();}).then(function(response){if(response.cod!==200){throw new Error();}setResponseObj(response);setLoading(false);}).catch(function(err){setError(true);setLoading(false);console.log(err.message);});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Find Current Weather Conditions\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:getForecast,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter City\",maxLength:\"50\",className:classes.textInput,value:city,onChange:function onChange(e){return setCity(e.target.value);}}),/*#__PURE__*/_jsxs(\"label\",{className:classes.Radio,children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"units\",checked:unit===\"imperial\",value:\"imperial\",onChange:function onChange(e){return setUnit(e.target.value);}}),\"Fahrenheit\"]}),/*#__PURE__*/_jsxs(\"label\",{className:classes.Radio,children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"units\",checked:unit===\"metric\",value:\"metric\",onChange:function onChange(e){return setUnit(e.target.value);}}),\"Celcius\"]}),/*#__PURE__*/_jsx(\"button\",{className:classes.Button,type:\"submit\",children:\"Get Forecast\"})]}),/*#__PURE__*/_jsx(Conditions,{responseObj:responseObj,error:error//new\n,loading:loading//new\n})]});};export default Forecast;","map":{"version":3,"sources":["/Users/iuliia/Desktop/React_projects/weather_app/src/components/Forecast/Forecast.js"],"names":["React","useState","Conditions","classes","Forecast","city","setCity","unit","setUnit","error","setError","loading","setLoading","responseObj","setResponseObj","getForecast","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","then","response","json","cod","Error","catch","err","console","log","message","textInput","target","value","Radio","Button"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,C,wFAGA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,eACGH,QAAQ,CAAC,EAAD,CADX,wCACdI,IADc,eACRC,OADQ,8BAEGL,QAAQ,CAAC,UAAD,CAFX,yCAEdM,IAFc,eAERC,OAFQ,8BAGKP,QAAQ,CAAC,KAAD,CAHb,yCAGdQ,KAHc,eAGPC,QAHO,8BAIST,QAAQ,CAAC,KAAD,CAJjB,yCAIdU,OAJc,eAILC,UAJK,eAMnB;AANmB,eAOiBX,QAAQ,CAAC,EAAD,CAPzB,0CAOdY,WAPc,gBAODC,cAPC,gBAQnB,QAASC,CAAAA,WAAT,CAAqBC,CAArB,CAAwB,CACpBA,CAAC,CAACC,cAAF,GAEA,GAAIZ,IAAI,CAACa,MAAL,GAAgB,CAApB,CAAuB,CACnB,MAAOR,CAAAA,QAAQ,CAAC,IAAD,CAAf,CACH,CAED;AACAA,QAAQ,CAAC,KAAD,CAAR,CACAI,cAAc,CAAC,EAAD,CAAd,CAEAF,UAAU,CAAC,IAAD,CAAV,CAEA,GAAIO,CAAAA,cAAc,CAAGC,kBAAkB,CAACf,IAAD,CAAvC,CAEHgB,KAAK,2EAAoEd,IAApE,eAA8EY,cAA9E,EAAgG,CAC9F,SAAU,KADoF,CAE9F,UAAW,CACP,kBAAmB,2CADZ,CAEP,iBAAkB,QAFX,CAFmF,CAAhG,CAAL,CAOIG,IAPJ,CAOS,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EAPjB,EAQIF,IARJ,CAQS,SAAAC,QAAQ,CAAI,CACd,GAAIA,QAAQ,CAACE,GAAT,GAAiB,GAArB,CAA0B,CACtB,KAAM,IAAIC,CAAAA,KAAJ,EAAN,CACH,CAEDZ,cAAc,CAACS,QAAD,CAAd,CACAX,UAAU,CAAC,KAAD,CAAV,CACH,CAfJ,EAgBIe,KAhBJ,CAgBU,SAAAC,GAAG,CAAI,CACVlB,QAAQ,CAAC,IAAD,CAAR,CACAE,UAAU,CAAC,KAAD,CAAV,CACAiB,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,EACH,CApBJ,EAqBC,CAEH,mBAEC,oCACO,uDADP,cAEO,cAAM,QAAQ,CAAEhB,WAAhB,wBACK,cACI,IAAI,CAAC,MADT,CAEI,WAAW,CAAC,YAFhB,CAGI,SAAS,CAAC,IAHd,CAII,SAAS,CAAEZ,OAAO,CAAC6B,SAJvB,CAKI,KAAK,CAAE3B,IALX,CAMI,QAAQ,CAAE,kBAACW,CAAD,QAAOV,CAAAA,OAAO,CAACU,CAAC,CAACiB,MAAF,CAASC,KAAV,CAAd,EANd,EADL,cASK,eAAO,SAAS,CAAE/B,OAAO,CAACgC,KAA1B,wBACI,cACI,IAAI,CAAC,OADT,CAEI,IAAI,CAAC,OAFT,CAGI,OAAO,CAAE5B,IAAI,GAAK,UAHtB,CAII,KAAK,CAAC,UAJV,CAKI,QAAQ,CAAE,kBAACS,CAAD,QAAOR,CAAAA,OAAO,CAACQ,CAAC,CAACiB,MAAF,CAASC,KAAV,CAAd,EALd,EADJ,gBATL,cAmBK,eAAO,SAAS,CAAE/B,OAAO,CAACgC,KAA1B,wBACI,cACI,IAAI,CAAC,OADT,CAEI,IAAI,CAAC,OAFT,CAGI,OAAO,CAAE5B,IAAI,GAAK,QAHtB,CAII,KAAK,CAAC,QAJV,CAKI,QAAQ,CAAE,kBAACS,CAAD,QAAOR,CAAAA,OAAO,CAACQ,CAAC,CAACiB,MAAF,CAASC,KAAV,CAAd,EALd,EADJ,aAnBL,cA6BK,eAAQ,SAAS,CAAE/B,OAAO,CAACiC,MAA3B,CAAmC,IAAI,CAAC,QAAxC,0BA7BL,GAFP,cAmCQ,KAAC,UAAD,EACE,WAAW,CAAEvB,WADf,CAEE,KAAK,CAAEJ,KAAO;AAFhB,CAGE,OAAO,CAAEE,OAAS;AAHpB,EAnCR,GAFD,CA6CF,CA3FD,CA6FA,cAAeP,CAAAA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\n\nconst Forecast = () => {\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    \n    //const uriEncodedCity = encodeURIComponent(city);\n    let [responseObj, setResponseObj] = useState({});\n    function getForecast(e) {\n        e.preventDefault();\n     \n        if (city.length === 0) {\n            return setError(true);\n        }\n     \n        // Clear state in preparation for new data\n        setError(false);\n        setResponseObj({});\n       \n        setLoading(true);\n       \n        let uriEncodedCity = encodeURIComponent(city);\n     \n     fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"apikey\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n     \n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n     }\n\n   return (\n \n    <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n\n            \n            <Conditions\n              responseObj={responseObj}\n              error={error} //new\n              loading={loading} //new\n              />\n       </div>\n\n   )\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}