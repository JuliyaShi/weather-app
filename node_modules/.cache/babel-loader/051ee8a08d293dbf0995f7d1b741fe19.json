{"ast":null,"code":"var _jsxFileName = \"/Users/iuliia/Desktop/React_projects/weather_app/src/components/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false); //const uriEncodedCity = encodeURIComponent(city);\n\n  let [responseObj, setResponseObj] = useState({});\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    } // Clear state in preparation for new data\n\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n    let uriEncodedCity = encodeURIComponent(city);\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"apikey\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: city,\n        onChange: e => setCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: classes.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter City\",\n          maxLength: \"50\",\n          className: classes.textInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: classes.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), \"Celcius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Conditions, {\n      responseObj: responseObj,\n      error: error //new\n      ,\n      loading: loading //new\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forecast, \"Z7UDa7CUQ839IT3t+mepOUDKFqo=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/iuliia/Desktop/React_projects/weather_app/src/components/Forecast/Forecast.js"],"names":["React","useState","Conditions","classes","Forecast","city","setCity","unit","setUnit","error","setError","loading","setLoading","responseObj","setResponseObj","getForecast","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","then","response","json","cod","Error","catch","err","console","log","message","target","value","Radio","textInput","Button"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\n\nconst Forecast = () => {\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    \n    //const uriEncodedCity = encodeURIComponent(city);\n    let [responseObj, setResponseObj] = useState({});\n    function getForecast(e) {\n        e.preventDefault();\n     \n        if (city.length === 0) {\n            return setError(true);\n        }\n     \n        // Clear state in preparation for new data\n        setError(false);\n        setResponseObj({});\n       \n        setLoading(true);\n       \n        let uriEncodedCity = encodeURIComponent(city);\n     \n     fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"apikey\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n     \n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n     }\n\n   return (\n \n    <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label className={classes.Radio}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n            </form>\n\n            \n            <Conditions\n              responseObj={responseObj}\n              error={error} //new\n              loading={loading} //new\n              />\n       </div>\n\n   )\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}